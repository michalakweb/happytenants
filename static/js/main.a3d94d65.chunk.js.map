{"version":3,"sources":["serviceWorker.js","firebase/firebase.js","redux/reducer/buyingListReducer.js","redux/store.js","redux/actions/actions.js","components/BuyingListItem.js","components/BottomNav.js","components/BuyingList.js","components/Chores.js","index.js"],"names":["Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","buyingListState","buyingListReducer","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","item","filter","el","id","list","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","startAddItemAction","itemData","dispatch","description","ref","push","then","addItemAction","objectSpread","key","myJSON","JSON","stringify","getState","localStorage","setItem","setListAction","startSetListAction","once","snapshot","listItems","forEach","childSnapshot","val","ReduxedBuyingListItem","connect","props","react_default","a","createElement","Row","className","Col","xs","lg","Button","disabled","isOnline","variant","onClick","_ref2","remove","startRemoveItemAction","BottomNav","react_router_dom","to","index_es","size","icon","BuyingList","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","error","componentDidMount","myListJSON","getItem","parse","on","snap","setState","componentDidUpdate","setTimeout","handleAdd","e","preventDefault","todoItem","target","elements","value","trim","focus","some","inherits","createClass","Container","dist","map","components_BuyingListItem","Form","onSubmit","Control","autoComplete","name","placeholder","block","components_BottomNav","Component","subscribe","reduxedBuyingList","moment","locale","set1","set2","set3","Dashboard","people","week","Number","format","includes","React","library","add","faStroopwafel","faClipboardList","faBroom","faBath","faUtensils","faTrashAlt","hashHistory","createHashHistory","basename","process","jsx","es","react_router","history","exact","path","component","Chores","ReduxedBuyingList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3d94d65.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      localStorage.setItem('isOffline', 'true')\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth';\r\n\r\nvar config = {\r\n  apiKey: \"AIzaSyAXq8JEGWNUGEd4ToVNuMgwNj4i6VhMBDI\",\r\n  authDomain: \"happy-tenants.firebaseapp.com\",\r\n  databaseURL: \"https://happy-tenants.firebaseio.com\",\r\n  projectId: \"happy-tenants\",\r\n  storageBucket: \"happy-tenants.appspot.com\",\r\n  messagingSenderId: \"1044021883702\"\r\n};\r\n  \r\nfirebase.initializeApp(config);\r\n  \r\nconst database = firebase.database();\r\n\r\nexport {firebase, database };","const buyingListState = [];\r\n\r\nconst buyingListReducer = (state = buyingListState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_ITEM\":\r\n            return [...state, action.item];\r\n        case \"REMOVE_ITEM\":\r\n            return state.filter(el => el.id !== action.id);\r\n        case \"SET_LIST\":\r\n            return action.list;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default buyingListReducer;","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport buyingListReducer from './reducer/buyingListReducer';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  buyingListReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\n","import {database} from '../../firebase/firebase';\r\nimport { store } from '../store';\r\n\r\n// Adding/removing makes a request to firebase first.\r\n// Once the request is succesful it dispatches actions to the local Redux store.\r\n// Next localStorage is updated.\r\n\r\nexport const addItemAction = (item) => ({\r\n    type: 'ADD_ITEM',\r\n    item\r\n});\r\n\r\nexport const startAddItemAction = (itemData) => {\r\n    return (dispatch) => {\r\n        const item = { description: itemData };\r\n\r\n        return database.ref(`todoList`).push(item)\r\n        .then((ref) => {\r\n            dispatch(addItemAction({\r\n                id: ref.key, \r\n                ...item\r\n            }));\r\n\r\n            const myJSON = JSON.stringify(store.getState());\r\n            localStorage.setItem('listItems', myJSON);\r\n        });\r\n    };\r\n};\r\n  \r\n\r\nconst removeItemAction = ({id}) => ({\r\n    type: 'REMOVE_ITEM',\r\n    id\r\n});\r\n\r\nexport const startRemoveItemAction = ({id}) => {\r\n    return (dispatch) => {\r\n        \r\n        return database.ref(`todoList/${id}`).remove()\r\n        .then(() => {\r\n            dispatch(removeItemAction({id}));\r\n            const myJSON = JSON.stringify(store.getState());\r\n            localStorage.setItem('listItems', myJSON);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setListAction = (list) => ({\r\n    type: 'SET_LIST',\r\n    list\r\n});\r\n\r\n// the async function below grabs the todoList items from the database\r\n// once it finishes it populates an array with objects/list items\r\n// when it's done the \"setListAction\" is dispatched to update the store\r\n// localStore also gets updated \r\n\r\nexport const startSetListAction = () => {\r\n    return (dispatch) => {\r\n        return database.ref(`todoList`).once('value').then(snapshot => {\r\n            const listItems = [];\r\n\r\n            snapshot.forEach(childSnapshot => {\r\n                listItems.push({\r\n                    id: childSnapshot.key,\r\n                    ...childSnapshot.val()\r\n                });\r\n            });\r\n\r\n            dispatch(setListAction(listItems));\r\n            const myJSON = JSON.stringify(listItems);\r\n            localStorage.setItem('listItems', myJSON);\r\n        });\r\n    };\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {startRemoveItemAction} from '../redux/actions/actions';\r\nimport {Button, Row, Col} from 'react-bootstrap';\r\n\r\nexport const BuyingListItem = (props) => (\r\n    <div>\r\n        <Row className='py-3 pl-2'>\r\n            <Col xs={8} lg={10}><p className='lead optionText'>{props.item.description}</p></Col>\r\n\r\n            <Col xs={4} lg={2} className='text-right'>\r\n                <Button \r\n                disabled={props.isOnline === false}\r\n                variant=\"outline-primary\" className='button--deleteOption' onClick={() => {\r\n                    props.dispatch(startRemoveItemAction({id : props.item.id}));\r\n                }}>Delete</Button>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n);\r\n\r\n/* Connecting the individual list item with the redux store, to be able to dispatch the 'delete_item' action  */\r\nconst mapStateToProps = (state) => ({\r\n    state\r\n});\r\n\r\nconst ReduxedBuyingListItem = connect(mapStateToProps)(BuyingListItem);\r\n  \r\n\r\nexport default ReduxedBuyingListItem;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst BottomNav = () => (\r\n    <div>\r\n        <Row className='endRow text-center pt-2'>\r\n            <Col>\r\n            \r\n                <Link to='/buyingList'>\r\n                    <p className='mb-1'>\r\n                        <FontAwesomeIcon className='fontAwesomeIcon' size='2x' icon=\"clipboard-list\" />\r\n                    </p>\r\n                    <p className='mb-1 p--nav'>Todo</p>\r\n                </Link>\r\n            </Col>\r\n            <Col xs={1}>\r\n                <div className=\"vl\"></div>\r\n            </Col>    \r\n            <Col>\r\n                <Link to='/'>\r\n                    <p className='mb-1'>\r\n                        <FontAwesomeIcon className='fontAwesomeIcon' size='2x' icon=\"broom\" />\r\n                    </p>\r\n                    <p className='mb-1 p--nav'>Chores</p>\r\n                </Link>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n);\r\n\r\nexport default BottomNav;","import React, { Component } from 'react';\r\nimport ReduxedBuyingListItem from './BuyingListItem';\r\nimport BottomNav from './BottomNav';\r\nimport { Offline, Online } from \"react-detect-offline\";\r\n\r\n//Firebase\r\nimport {database} from '../firebase/firebase';\r\n\r\n// Bootstrap & styles\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\r\nimport '../style.scss';\r\n\r\n\r\n//Redux\r\nimport {startAddItemAction, startSetListAction, setListAction} from '../redux/actions/actions';\r\nimport {store} from '../redux/store';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nexport class BuyingList extends Component {\r\n  state = {\r\n    error: ''\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // After the component mounts it \r\n    // checks if TODO list items have been set in LocalStorage previously.\r\n    // If so, then it will get and show them and afterwards connects with firebase to \r\n    // update the redux store and show the latest state.\r\n\r\n    const myListJSON = localStorage.getItem('listItems');\r\n    if(!!myListJSON) {\r\n      const listItems = JSON.parse(myListJSON);\r\n      this.props.dispatch(setListAction(listItems));\r\n    }\r\n\r\n    const connectedRef = database.ref(\".info/connected\");\r\n    connectedRef.on(\"value\", (snap) => {\r\n      if (snap.val() === true) {\r\n        this.props.dispatch(startSetListAction())\r\n        .then(() => {\r\n          this.setState(() => ({\r\n            error: ''\r\n          }));\r\n        })\r\n        \r\n      } else {\r\n        this.setState(() => ({\r\n          error: `Updating the list...`\r\n        }));\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    // Error messages disappear after three seconds, except the updating the list error\r\n    if(this.state.error.length !== 0 && this.state.error !== 'Updating the list...') {\r\n      setTimeout(() => {\r\n        this.setState(() => ({\r\n          error: ''\r\n        }))\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  handleAdd = (e) => {\r\n    e.preventDefault();\r\n    let todoItem = e.target.elements.todoItem.value.trim();\r\n    e.target.elements.todoItem.value = '';\r\n    e.target.elements.todoItem.focus();\r\n\r\n    // A set of checks to prevent duplicate or invalid submissions\r\n\r\n    if(typeof todoItem !== \"string\" || todoItem === '' || todoItem.length > 120) {\r\n      this.setState(() => ({\r\n        error: 'Submission has more than 120 characters or is blank. Try again.'\r\n      }));\r\n    }\r\n\r\n    else if(this.props.state.some(el => el.description === todoItem)) {\r\n      this.setState(() => ({\r\n        error: 'This option already exists. Try again.'\r\n      }));\r\n    }\r\n\r\n    else {\r\n      this.setState(() => ({\r\n        error: ''\r\n      }));\r\n\r\n      this.props.dispatch(startAddItemAction(todoItem));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container className='container container--main text-center'>\r\n          <Row>\r\n              <Col className='px-0 mb-4'>\r\n                  <h1 className=\"display-4 py-4 header\">Todo list:</h1>\r\n              </Col>\r\n          </Row>\r\n\r\n          <Container className='container--list'> \r\n                  {/* Disabling users from clicking on the buttons, depending on their Internet connection */}\r\n\r\n                  <Offline>\r\n                  {!this.props.state.length ? <p className='lead py-4 mb-0'>Currently nothing on the list</p> :\r\n                  this.props.state.map(item => <ReduxedBuyingListItem key={item.id} item={item} isOnline={false}/>)}\r\n                  </Offline>\r\n                  <Online>\r\n                  {!this.props.state.length ? <p className='lead py-4 mb-0'>Currently nothing on the list</p> :\r\n                  this.props.state.map(item => <ReduxedBuyingListItem key={item.id} item={item} isOnline={true}/>)}\r\n                  </Online>\r\n                \r\n                <div className='formTodo'>\r\n                    <Form onSubmit={this.handleAdd}>\r\n                      <Row>\r\n                        <Col className='my-2'>\r\n                        {/* Preventing users from submitting, depending on their Internet connection */}\r\n                          <Online>\r\n                            <Form.Control autoComplete='off' type=\"text\" name='todoItem' \r\n                            placeholder=\"Type your option here.\" disabled={false}/>\r\n                          </Online>\r\n                          <Offline>\r\n                            <Form.Control autoComplete='off' type=\"text\" name='todoItem' \r\n                            placeholder=\"You're offline. Can't add/delete options\" disabled={true}/>\r\n                          </Offline>\r\n                        </Col>\r\n                      </Row> \r\n                      <Row>\r\n                        <Col className='my-2'>\r\n                          <Online><Button block variant=\"primary\" type=\"submit\">\r\n                          Add task</Button>\r\n                          </Online>\r\n                          <Offline><Button disabled block variant=\"primary\" type=\"submit\">\r\n                          Add task</Button>\r\n                          </Offline>\r\n                        </Col>\r\n                      </Row>\r\n                     </Form>\r\n                </div>\r\n                                \r\n                {/* Error handling */}\r\n                {this.state.error.length !== 0 && <p className='mt-3 mb-2'>{this.state.error}</p>}\r\n\r\n          </Container>\r\n\r\n          <BottomNav/>\r\n          \r\n      </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// store.subscribe(() => console.log(store.getState()))\r\nstore.subscribe(() => store.getState())\r\n\r\nconst mapStateToProps = (state) => ({\r\n  state\r\n})\r\n\r\nconst reduxedBuyingList = connect(mapStateToProps)(BuyingList);\r\n\r\nexport default reduxedBuyingList;\r\n\r\n","import React from 'react';\r\nimport BottomNav from './BottomNav';\r\n\r\n// Moment\r\nimport moment from 'moment';\r\nimport 'moment/locale/pl';\r\n\r\n// Bootstrap, styles, icons\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport '../style.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\n// Setting the locale to pl, to have Monday as first day of the week\r\nmoment.locale('pl')\r\n\r\n// Weekly time sets for dispatching chores.\r\n// In this case there are 3 people in the house, but only two chores to do, so\r\n// there is always a week when one person doesn't have to do anything.\r\nlet set1 = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52];\r\nlet set2 = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50];\r\nlet set3 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51];\r\n\r\nclass Dashboard extends React.Component {\r\n    state = {\r\n        people: ['Kamil', 'Kasia', 'Mateusz'],\r\n        // week fetches the current week number (eg. \"1\" out of 52)\r\n        week: Number(moment().format('w')),\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container className='container container--main text-center'>\r\n                    <Row>\r\n                        <Col className='px-0 mb-4'>\r\n                            <h1 className=\"display-4 py-4 header\">This weeks's cleaning:</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Container className='container--list'>\r\n                        <Row className='py-5'>\r\n                            <Col xs={5}>\r\n                                <FontAwesomeIcon className='fontAwesomeIcon px-2' size='3x' icon=\"utensils\" />\r\n                                <FontAwesomeIcon className='fontAwesomeIcon px-2' size='3x' icon=\"trash-alt\" />\r\n                            </Col>\r\n                            <Col className='align-self-center'>\r\n                                <p className='h2'> \r\n                                    {/* set of if/else statements to determine who has to do the chores */}\r\n                                    {\r\n                                    set1.includes(this.state.week) ? this.state.people[0] : \r\n                                    (set3.includes(this.state.week) ? this.state.people[1] : this.state.people[2])\r\n                                    }\r\n                                </p>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='py-5'>\r\n                            <Col xs={5} className=''>\r\n                                <FontAwesomeIcon className='fontAwesomeIcon px-2' size='3x' icon=\"bath\" />\r\n                                <FontAwesomeIcon className='fontAwesomeIcon px-2' size='3x' icon=\"broom\" />\r\n                            </Col>\r\n                            <Col className='align-self-center'>\r\n                                <p className='h2'>\r\n                                    {/* set of if/else statements to determine who has to do the chores */}\r\n                                    {\r\n                                    set2.includes(this.state.week) ? this.state.people[0] : \r\n                                    (set1.includes(this.state.week) ? this.state.people[1] : this.state.people[2])\r\n                                    }\r\n                                </p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                   \r\n                    <BottomNav/>\r\n                    \r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n    \r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\n\r\n//React Router\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Router, Route, Switch} from \"react-router-dom\";\r\nimport { createHashHistory } from 'history'\r\n    \r\n//Components\r\nimport ReduxedBuyingList from './components/BuyingList';\r\nimport Chores from './components/Chores';\r\n\r\n//Redux\r\nimport {store} from './redux/store';\r\nimport {Provider} from 'react-redux';\r\n\r\n//Font Awesome\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faStroopwafel, faClipboardList, faBroom, faBath, faUtensils, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faStroopwafel, faClipboardList, faBroom, faBath, faUtensils, faTrashAlt);\r\n\r\n//Hash History\r\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\r\n\r\nconst jsx = (\r\n    <Provider store={store}>\r\n        <Router history={hashHistory}>\r\n            <Switch>\r\n                <Route exact path='/' component={Chores}/>\r\n                <Route path='/buyingList' component={ReduxedBuyingList}/>\r\n                <Route component={() => (<div>404 Not found 1</div>)} />\r\n            </Switch>\r\n        </Router>\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(jsx, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}